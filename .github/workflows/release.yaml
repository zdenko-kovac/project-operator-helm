name: Trigger release

on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'Whether to bump major, minor or patch version'
        required: false
        default: patch
        type: choice
        options:
        - major
        - minor
        - patch
      desired-version:
        description: 'Version to be released; if specified, version-bump will be ignored'
        required: false
        default: ''

  schedule:
    - cron: '*/15 * * * *'

concurrency: trigger-release

env:
  TAG_PREFIX: ''
  INITIAL_TAG: 0.1.0
  SEMVER_VERSION: 3.4.0
  HELM_DOCS_VERSION: v1.11.0
  CHART_DIRECTORY: chart

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Trigger release
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Validate ref
      run: |
        if [ "${{ github.ref }}" != refs/heads/main ]; then
          >&2 echo "Invalid ref: ${{ github.ref }} (expected: refs/heads/main)"
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.WORKFLOW_USER_GH_TOKEN }}

    - name: Setup semver
      uses: ./.github/actions/setup-semver
      with:
        version: ${{ env.SEMVER_VERSION }}
        install-directory: ${{ runner.temp }}/bin

    - name: Setup helm-docs
      uses: ./.github/actions/setup-helm-docs
      with:
        version: ${{ env.HELM_DOCS_VERSION }}
        install-directory: ${{ runner.temp }}/bin

    - name: Determine current release
      id: get_current_release
      uses: ./.github/actions/get-highest-tag
      with:
        prefix: ${{ env.TAG_PREFIX }}

    - name: Get number of commits since current release
      id: commits
      if: github.event_name == 'schedule'
      run: |
        git fetch --tags
        echo "count=$(git rev-list --count --no-merges ${{ steps.get_current_release.outputs.version }}..HEAD --before=1.hour)" >> $GITHUB_OUTPUT

    - name: Determine target release
      id: get_target_release
      run: |
        create_release=true
        desired_version=${{ inputs.desired-version }}
        current_version=${{ steps.get_current_release.outputs.version }}
        if "${{ github.event_name == 'schedule' }}"; then
          version_bump=patch
          commits_count=${{ steps.commits.outputs.count }}

          if [[ $commits_count -eq 0 ]]; then
            create_release=false
            >&2 echo "There are no commits since latest release found, nothing to do."
          fi
        else
          version_bump=${{ inputs.version-bump }}
        fi

        if [ -z "$desired_version" ]; then
          case $version_bump in
            major|minor|patch)
              # ok
              ;;
            *)
              >&2 echo "Invalid input: version-bump ($version_bump)."
              exit 1
          esac
          if [ -z "$current_version" ]; then
            version=${INITIAL_TAG/#$TAG_PREFIX/}
            tag=$INITIAL_TAG
          else
            version=$(semver bump $version_bump $current_version)
            tag=$TAG_PREFIX$version
          fi
        else
          if [[ $desired_version =~ ^$TAG_PREFIX([0-9].*)$ ]]; then
            version=${BASH_REMATCH[1]}
            tag=$desired_version
          else
            >&2 echo "Invalid input: desired-version ($desired_version) should start with $TAG_PREFIX."
            exit 1
          fi
          if [ "$(semver validate $version)" != valid ]; then
            >&2 echo "Invalid input: desired-version ($version) is not a valid semantic version."
            exit 1
          fi
          if [ "$(semver compare $version $current_version)" -le 0 ]; then
            >&2 echo "Invalid input: desired-version ($version) should be higher than current version ($current_version)."
            exit 1
          fi
        fi

        echo "Target version: $version"
        echo "Target tag: $tag"
        echo "Create release: $create_release"
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "create_release=$create_release" >> $GITHUB_OUTPUT

      # TODO: if this job fails after the following step (resp. after the following step has any pushed commits),
      # a re-run of the job will fail in the following step, because it will try to make pushes to the triggering sha
      # which is no longer the head; this should be caught/improved.
    - name: Update chart version and chart docs
      if: steps.get_target_release.outputs.create_release == 'true'
      run: |
        current_chart_version=$(yq .version $CHART_DIRECTORY/Chart.yaml)
        target_chart_version=${{ steps.get_target_release.outputs.tag }}

        echo "Updating $CHART_DIRECTORY/Chart.yaml from $current_chart_version to $target_chart_version ..."
        perl -pi -e "s#^version:.*#version: $target_chart_version#g" $CHART_DIRECTORY/Chart.yaml

        if [ -z "$(git status --porcelain)" ]; then
          echo "Nothing has changed; skipping commit ..."
        else
          git config user.name "${{ vars.WORKFLOW_USER_NAME }}"
          git config user.email "${{ vars.WORKFLOW_USER_EMAIL }}"
          git add -A
          git commit -m "Bump chart version from $current_chart_version to $target_chart_version"
        fi

        helm-docs -c $CHART_DIRECTORY -s file

        if [ -z "$(git status --porcelain)" ]; then
          echo "Nothing has changed; skipping commit ..."
        else
          git config user.name "${{ vars.WORKFLOW_USER_NAME }}"
          git config user.email "${{ vars.WORKFLOW_USER_EMAIL }}"
          git add -A
          git commit -m "Update chart docs"
        fi

        git push

    - name: Determine target commit
      if: steps.get_target_release.outputs.create_release == 'true'
      id: get_target_commit
      run: |
        sha=$(git rev-parse HEAD)
        echo "Target commit: $sha"
        echo "sha=$sha" >> $GITHUB_OUTPUT

    - name: Wait for check suites to complete
      if: steps.get_target_release.outputs.create_release == 'true'
      uses: zdenko-kovac/await-check-suites@master
      with:
        ref: ${{ steps.get_target_commit.outputs.sha }}
        intervalSeconds: 10
        timeoutSeconds: 1800
        failStepIfUnsuccessful: true
        appSlugFilter: github-actions

    - name: Create Release
      if: steps.get_target_release.outputs.create_release == 'true'
      env:
        GH_TOKEN: ${{ secrets.WORKFLOW_USER_GH_TOKEN }}
      run: |
        gh release create ${{ steps.get_target_release.outputs.tag }} \
          --target "${{ steps.get_target_commit.outputs.sha }}"
